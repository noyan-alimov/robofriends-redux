{"version":3,"sources":["components/card.js","components/searchbox.js","App.js","redux/actions.js","redux/types.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["Card","name","email","id","className","src","Searchbox","searchbox","type","placeholder","onChange","App","this","props","onRequestRobots","robots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","style","margin","map","React","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.b55068d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css';\r\n\r\nconst Card = ({ name, email, id }) => (\r\n  <div className='card'>\r\n    <img className='image' src={`https://robohash.org/${id}`} />\r\n    <h2 className='name'>{name}</h2>\r\n    <h4 className='email'>{email}</h4>\r\n  </div>\r\n)\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport './searchbox.css';\r\n\r\nconst Searchbox = ({ searchbox }) => (\r\n  <div className='searchbox'>\r\n    <input\r\n      type='search'\r\n      placeholder='search robots'\r\n      className='search-input'\r\n      onChange={searchbox}\r\n    />\r\n  </div>\r\n)\r\n\r\nexport default Searchbox;\r\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport Card from './components/card';\nimport Searchbox from './components/searchbox';\nimport { setSearchField, getRobotsData } from './redux/actions';\n\nconst mapStateToProps = state => ({\n  searchField: state.searchRobots.searchField,\n  isPending: state.requestRobots.isPending,\n  robots: state.requestRobots.robots,\n  error: state.requestRobots.error\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n  onRequestRobots: () => dispatch(getRobotsData())\n})\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.onRequestRobots()\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return isPending ?\n      <h1 style={{ margin: '50px 50px' }}>Loading...</h1> :\n      (\n        <div className='App'>\n          <h1 className='title'>ROBOFRIENDS</h1>\n          <div className='searchbox-container'>\n            <Searchbox searchbox={onSearchChange}/>\n          </div>\n          <div className=\"robots-container\">\n            {\n              filteredRobots.map(robot => {\n                return(\n                  <Card\n                    name={robot.name}\n                    email={robot.email}\n                    id={robot.id}\n                  />\n                );\n              })\n            }\n          </div>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './types.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\nexport const getRobotsData = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({\r\n      type: REQUEST_ROBOTS_SUCCESS,\r\n      payload: data\r\n    }))\r\n    .catch(error => dispatch({\r\n      type: REQUEST_ROBOTS_FAILED,\r\n      payload: error\r\n    }))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './types.js';\r\n\r\nconst initialStateSearch = {\r\n  searchField: '',\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return {...state, isPending: true };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return {...state, robots: action.payload, isPending: false};\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return {...state, error: action.payload, isPending: false};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport {createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './redux/reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}